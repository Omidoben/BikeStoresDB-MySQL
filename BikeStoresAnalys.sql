# In this project, I analyze the Bike stores data base to provide valuable insights into the company's performance over time

USE bikestores;

# Basic Questions

# 1.Calculate the total price column and add it to the table

ALTER TABLE order_items ADD COLUMN Total_Price double;

UPDATE order_items 
SET 
    Total_Price = ROUND(quantity * (list_price - (list_price * discount)),
            2);

# 2. What is the total revenue generated by the stores

SELECT 
    ROUND(SUM(quantity * (list_price - (list_price * discount))),
            2) Total_Revenue
FROM
    order_items;

#The total revenue generated from the 3 stores is $7686188.71

# 3. What is the monthly average number of orders placed per year

SELECT 
    year, AVG(x.num_orders) avg_orders
FROM
    (SELECT 
        YEAR(order_date) year,
            MONTHNAME(order_date),
            COUNT(order_id) num_orders
    FROM
        orders
    GROUP BY YEAR(order_date) , MONTHNAME(order_date)
    ORDER BY 1) x
GROUP BY year;

#On average, 2017 had the highest number of monthly orders placed (57.33), followed closely by 2016, 
#where as 2018 had the least.

# 4.What are the top 5 and bottom 5 products in terms of revenue?

WITH product_revenue AS
	(SELECT p.product_name,
		ROUND(SUM(ord.Total_Price), 2) tot_revenue
	FROM products p
	INNER JOIN order_items ord ON p.product_id = ord.product_id
	GROUP BY p.product_name
	ORDER BY 2 DESC),
product_ranking AS
	(SELECT *,
			RANK() OVER(ORDER BY tot_revenue DESC) prod_rank
	FROM product_revenue),
top_5 AS
	(SELECT *
	FROM product_ranking 
	WHERE prod_rank <= 5),
bottom_5 AS
	(SELECT *
	FROM product_ranking 
	WHERE prod_rank >= 274)
SELECT t.product_name, t.tot_revenue, t.prod_rank 
FROM top_5 t

UNION ALL

SELECT b.product_name, b.tot_revenue, b.prod_rank
FROM bottom_5 b;

#Trek Slash 8 generated the highest revenue - $555,558.46, followed closely by Trek Conduit. On the other hand, Electra Savannah had the least revenue - $223.99

# 5.How many new customers were acquired in the last year

SELECT 
    COUNT(DISTINCT (customer_id)) num_customers
FROM
    orders
WHERE
    customer_id NOT IN (SELECT DISTINCT
            (customer_id) cust_before_2018
        FROM
            orders
        WHERE
            YEAR(order_date) < 2018)
        AND QUARTER(order_date) = 4;

#Only 2 new customers were acquired by the company in 2018

# 6.What is the average spending per customer?

WITH customer_spending 
AS
	(SELECT customer_id, round(sum(Total_Price),2) total_amount
	FROM orders o
	INNER JOIN order_items ord ON o.order_id = ord.order_id
	GROUP BY customer_id
	ORDER BY 2 DESC)
SELECT round(avg(total_amount), 2) avg_spending
FROM customer_spending;

#On average, each customer had spent $5322.84

# 7.Which products are low in stock or out of stock?

SELECT 
    product_name,
    total_products,
    CASE
        WHEN x.total_products IS NULL THEN 'Out of Stock'
        WHEN x.total_products BETWEEN 1 AND 50 THEN 'Low in Stock'
        WHEN x.total_products BETWEEN 51 AND 100 THEN 'Moderate'
        ELSE 'Sufficient'
    END stock_descriptor
FROM
    (SELECT 
        p.product_name, SUM(s.quantity) total_products
    FROM
        products p
    LEFT JOIN stocks s ON p.product_id = s.product_id
    GROUP BY p.product_name
    ORDER BY 2) x;
    
# Approximately 7 products were out of stock, majority of the products were low in stock, while only a few were sufficient.

# 8.How many sales have each staff member made in the last year?

SELECT 
    s.first_name,
    s.last_name,
    ROUND(SUM(Total_Price), 2) total_sales
FROM
    staffs s
        INNER JOIN
    orders o ON s.staff_id = o.staff_id
        INNER JOIN
    order_items ord ON o.order_id = ord.order_id
WHERE
    YEAR(order_date) = 2018
GROUP BY s.first_name , s.last_name
ORDER BY 3 DESC;

# Venita Daniel had the highest sales ($625,358.01) in 2018, Marcelene Boyer came in at second while Layla Terrell had the least sales ($56,531.3).

# 9. What is the average order size for each staff member

SELECT 
    first_name,
    last_name,
    ROUND(AVG(num_orders), 0) avg_order_size
FROM
    (SELECT 
        s.first_name,
            s.last_name,
            COUNT(o.order_id) num_orders
    FROM
        staffs s
    INNER JOIN orders o ON s.staff_id = o.staff_id
    INNER JOIN order_items ord ON o.order_id = ord.order_id
    GROUP BY s.first_name , s.last_name , o.order_id) x
GROUP BY first_name , last_name;

# Surprisingly, each staff registered an equal number of average order size - 3.

# 10.How many customers have made repeat purchases in the last year?

SELECT *,
		row_number() over() num_customer
FROM
    (SELECT 
        c.customer_id,
            c.first_name,
            c.last_name,
            COUNT(*) num_orders
    FROM
        customers c
    INNER JOIN orders o ON c.customer_id = o.customer_id
    WHERE
        YEAR(order_date) = 2018
    GROUP BY customer_id , c.first_name , c.last_name
    ORDER BY 4 DESC) x
WHERE
    num_orders >= 2;
    
# Only 20 customers customers made more than one order in the year 2018, with 2 customers having made 3 orders each.

# 11. Which products have seen the most significant increase or decrease in sales?

SELECT product_name, years, months, tot_sales,
		round(tot_sales - LAG(tot_sales, 1) OVER (PARTITION BY product_name), 2) prev_month_sales,
        concat(round((tot_sales - LAG(tot_sales, 1) OVER (PARTITION BY product_name)) / 
				LAG(tot_sales, 1) OVER (PARTITION BY product_name) * 100, 2), '%') pct_diff
FROM 
(SELECT p.product_name, year(o.order_date) AS years, monthname(o.order_date) AS months,
		round(sum(ord.Total_Price), 2) AS tot_sales
FROM products p
INNER JOIN order_items ord ON p.product_id = ord.product_id
INNER JOIN orders o ON o.order_id = ord.order_id
WHERE year(order_date) = 2018
GROUP BY p.product_name, years, months
ORDER BY p.product_name, years, 
		FIELD(months, 'January', 'February', 'March', 'April', 'May', 'June', 
			'July', 'August', 'September', 'October', 'November', 'December')) x;

# 12. Query to find the top 10 customers
#In this query, I create a view to obscure the email column and hide other sensitive customer details 

CREATE VIEW top_10_customers AS
WITH cust_expenditure AS
		(SELECT c.first_name, c.last_name, 
				concat(substr(c.email, 1, 3), '****', substr(c.email, position('@' in c.email))) email,
				round(sum(Total_Price), 2) amount_spent,
                state
		FROM customers c
		INNER JOIN orders o ON c.customer_id = o.customer_id
		INNER JOIN order_items ord ON o.order_id = ord.order_id
		GROUP BY c.first_name, c.last_name, c.email, state
		ORDER BY amount_spent DESC),
cust_ranking AS
		(SELECT *,
				RANK() OVER(ORDER BY amount_spent DESC) customer_rnk
FROM cust_expenditure)
SELECT *
FROM cust_ranking
WHERE customer_rnk <= 10;

#Check the results of the view
SELECT * FROM top_10_customers;

#Based on the analysis, Sharyn Hopkins had spent the highest amount of money (34807.93), followed by Pamelia Newman ($33,634.24)

# 13. What are the 2 most sold products per state

WITH products_revenue AS
	(SELECT p.product_name, c.state, 
			round(sum(ord.Total_Price), 2) tot_revenue
	 FROM customers c
	 INNER JOIN orders o ON o.customer_id = c.customer_id
	 INNER JOIN order_items ord ON o.order_id = ord.order_id
	 INNER JOIN products p ON ord.product_id = p.product_id
	 GROUP BY p.product_name, c.state
	 ORDER BY tot_revenue DESC),
 prod_rank AS
	(SELECT product_name, state, tot_revenue,
			RANK() OVER (PARTITION BY state ORDER BY tot_revenue DESC) rnk
FROM products_revenue)
SELECT * 
FROM prod_rank
WHERE rnk <= 2;

#Trek Slash 8 was the most sold product in each state. Trek Conduit was the second most sold in CA and NY, while Trek Fuel was the second most sold in TX.

# 14. What is the most selling category 

SELECT *, 
		RANK () OVER (PARTITION BY state ORDER BY tot_revenue DESC) rnk
FROM 
	(SELECT ct.category_name, c.state, 
			round(sum(Total_Price), 2) tot_revenue
	FROM categories ct
	INNER JOIN products p ON ct.category_id = p.category_id
	INNER JOIN order_items ord ON p.product_id = ord.product_id
	INNER JOIN orders o ON ord.order_id = o.order_id
	INNER JOIN customers c ON o.customer_id = c.customer_id
	GROUP BY ct.category_name, c.state
	ORDER BY 2 DESC) most_selling_cat;

#Mountain bikes was the most sold category in each state, while Children Bikes were the least sold.

# 15. 7 day moving average

SELECT date(order_date),
		round(sum(Total_Price), 2) tot_revenue,
        round(avg(sum(Total_Price))
			over (order by date(order_date) 
				range between interval 3 day preceding and interval 3 day following), 2)  7_day_avg
FROM orders o
INNER JOIN order_items ord ON o.order_id = ord.order_id
GROUP BY date(order_date);


# 16. Segment customers based on their purchasing behavior

SELECT 
    c.customer_id,
    COUNT(o.order_id) num_purchases,
    CASE COUNT(o.order_id)
        WHEN 1 THEN 'Single Purchase'
        WHEN 2 THEN 'Repeat Customer'
        ELSE 'Frequent Customer'
    END AS customer_segment
FROM
    customers c
        INNER JOIN
    orders o ON c.customer_id = o.customer_id
        INNER JOIN
    order_items ord ON o.order_id = ord.order_id
GROUP BY customer_id
ORDER BY 2 DESC;

#This query counts the number of orders for each customer and categorizes them into different segments based on 
#their purchasing behavior


# 17. Segment customers based on region, number of purchases, and total spending
# How does spending differ among different customer segments?

SELECT 
    order_segment,
    spending_segment,
    SUM(num_purchases) tot_orders,
    ROUND(SUM(total_spending), 2) tot_spending
FROM
    (SELECT 
        c.customer_id,
            c.state,
            COUNT(DISTINCT (o.order_id)) num_purchases,
            ROUND(SUM(ord.Total_Price), 2) total_spending,
            CASE COUNT(DISTINCT (o.order_id))
                WHEN 1 THEN 'Single Purchase'
                WHEN 2 THEN 'Repeat Customer'
                ELSE 'Frequent Customer'
            END AS order_segment,
            CASE
                WHEN SUM(ord.Total_Price) < 1500 THEN 'Low Spender'
                WHEN SUM(ord.Total_Price) BETWEEN 1500 AND 5000 THEN 'Medium Spender'
                ELSE 'High Spender'
            END AS spending_segment
    FROM
        customers c
    INNER JOIN orders o ON c.customer_id = o.customer_id
    INNER JOIN order_items ord ON o.order_id = ord.order_id
    GROUP BY c.customer_id , c.state
    ORDER BY 4 DESC) x
GROUP BY order_segment , spending_segment;

#This query aggregates spending based on both the order and spending segments. It provides a count of customers 
#and the total spending for each combination of order and spending segments.
#It helps understand how different customer segments contribute to overall spending and how spending patterns 
#vary among these segments.